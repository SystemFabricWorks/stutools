'\" t
.\"     Title: spit
.\"    Author: Stuart Inglis, Ph.D.
.\" Generator: Asciidoctor 1.5.5
.\"      Date: 2019-07-15
.\"    Manual: spit manual
.\"    Source: spit 1.1
.\"  Language: English
.\"
.TH "SPIT" "1" "2019-07-15" "spit 1.1" "spit manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.LINKSTYLE blue R < >
.SH "NAME"
spit \- Stu\(aqs powerful I/O tester
.SH "SYNOPSIS"
.sp
\fBspit\fP [\fIOPTION\fP]... \fIFILE\fP...
.SH "DESCRIPTION"
.sp
The spit(1) performs various I/O. The \fB\-c\fP command spins up a command
string on a dedicated thread with an AIO context per thread.
.SH "OVERVIEW"
.sp
\fBspit\fP [GLOBAL OPTIONS] \-c \fIcommands\fP \-c \fIcommands\fP \-c \fIcommands\fP
.SH "GLOBAL OPTIONS"
.sp
\fBf device\fP
.RS 4
Specific a single device (e.g. \-f /dev/ram0)
.RE
.sp
\fBG size\fP
.RS 4
Limit the positions to a maximum of \fBsize\fP GiB (e.g. \-G 32)
.RE
.sp
\fBI filename\fP
.RS 4
Specific a file that contains a list of device names (e.g. \-f devices.txt)
.RE
.sp
\fBB filename\fP
.RS 4
The benchmarking file that has the per second read/write speed and IOPs
.RE
.sp
\fBj N\fP
.RS 4
Multiply the number of commands (\fB\-c\fP) by N. (e.g. \-j 8)
.RE
.sp
\fBt s\fP
.RS 4
Limit the execution to \fBs\fP seconds (e.g. \-t 30)
.RE
.sp
\fBp precondition_options\fP
.RS 4
Before executing any commands, run the precondition write
commands. Defaults to 4k writes. Options include: \fB\-p Gn\fP, \fB\-p Gs1\fP for
sequential, \fB\-p Gk8\fP for 8 KiB writes. (e.g. \-p G32). \fBI100000\fP will exit
the preconditioning step after the first LBA pass if the IOPS is under the specified threshold.
.RE
.sp
\fBO filename\fP
.RS 4
Specifies a list of raw devices, matched with the \fB\-f\fP option shows
device read/write amplification. (e.g. \-f /dev/md0 \-O devices.txt)
.RE
.sp
\fBP\fP
.RS 4
Save positions to the file \f[CR]spit\-positions.txt\fP
.RE
.sp
\fBv\fP
.RS 4
Verify writes by reading and checking.
.RE
.SH "COMMAND OPTIONS"
.sp
A command is a single contiguous string. Spaces are ignored if the
entire string is quoted. An example of a command string may look like:
\fBspit\fP \-c \fBrk64P1000s3\fP \-f /dev/device
.sp
The command options are described below:
.sp
\fBr\fP
.RS 4
Performs reads
.RE
.sp
\fBw\fP
.RS 4
Performs writes
.RE
.sp
\fBm\fP
.RS 4
Mix writing and reading from previous writes
.RE
.sp
\fBpN\fP
.RS 4
Set the read/write ratio to \fBN\fP. (e.g. p0 is write only, p1 is read only, p0.75 is 75% reads)
.RE
.sp
\fBGlow\-high\fP
.RS 4
Limit the position range to \fBlow\fP to \fBhigh\fP GiB. (e.g. G2\-3).
.RE
.sp
\fBG_\fP
.RS 4
The range can be specified with the syntax \fBG_\fP which will split the G ranges evenly between all threads.
.RE
.sp
\fBkN\fP or \fBklowBS\-highBS\fP
.RS 4
Block size or \fIlowblocksize\fP to \fIhighblocksize\fP range. (e.g. k4\-128)
.RE
.sp
\fBn\fP
.RS 4
Use random positions with replacement
.RE
.sp
\fBN\fP
.RS 4
Add the maximum block size to all positions
.RE
.sp
\fBqN\fP
.RS 4
Queue depth
.RE
.sp
\fBJN\fP
.RS 4
Jumble/shuffle \fBN\fP values at a time. (e.g. s1J10 randomises each 10 values)
.RE
.sp
\fBjN\fP
.RS 4
Scales up the number of jobs. Similar to the global \fBj\fP command.
.RE
.sp
\fBRN\fP
.RS 4
Seed
.RE
.sp
\fBsN\fP
.RS 4
number of contiguous sequence regions. \fBs0\fP means random, \fBs1\fP means
a single linear stream, \fBs32\fP means 32 contigous stream.
.RE
.sp
\fBsN\-maxSizeInKiB\fP
.RS 4
Specify the number of continuous sequence regions, include the maximum
continuous length in KiB. e.g. s32\-1024 makes 32 contiguous regions with a
maximum size of 1024 KiB (1 MiB).
.RE
.sp
\fBz\fP
.RS 4
Start sequential positions from block 0
.RE
.sp
\fBZn\fP
.RS 4
Start sequential positions from block \fBn\fP
.RE
.SS "Scale/position commands"
.sp
\fBPn\fP
.RS 4
Limit the number of positions to \fBn\fP
.RE
.sp
\fBxn\fP
.RS 4
Multiply the number of positions by \fBn\fP
.RE
.SS "Timing commands"
.sp
\fBBn\fP
.RS 4
Before the command starts, wait \fBn\fP seconds
.RE
.sp
\fBWn\fP
.RS 4
Wait for \fBn\fP seconds between iterations
.RE
.sp
\fBTn\fP
.RS 4
Limits the thread/command to \fBn\fP seconds
.RE
.sp
\fBXn\fP
.RS 4
Instead of time based, iterate until the positions have been processed
\fBn\fP times.
.RE
.SH "BENCHMARKING"
.SS "Sequential reads / writes"
.sp
In the following commands, replace \fBr\fP with \fBw\fP for writes.
.sp
\fBspit\fP \-f /dev/device \-c rk64
.sp
.if n \{\
.RS 4
.\}
.nf
Performs a single thread/job that performs reads, with 64 KiB reads
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c rk64 \-j 32
.sp
.if n \{\
.RS 4
.\}
.nf
Create 32 threads, with a single contigous read inside each thread
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c r32k64
.sp
.if n \{\
.RS 4
.\}
.nf
Create a single threads, break the device into 32 contiguous regions
.fi
.if n \{\
.RE
.\}
.SS "Random read / writes"
.sp
\fBspit\fP \-f /dev/device \-c rs0
.sp
.if n \{\
.RS 4
.\}
.nf
Performs a single thread/job, random 4KiB reads
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c rs0 \-j 32
.sp
.if n \{\
.RS 4
.\}
.nf
Creates 32 threads, reads random 4KiB reads
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c rs0 \-j 32 \-G1
.sp
.if n \{\
.RS 4
.\}
.nf
Creates 32 threads, reads randomly 4KiB reads, limited to first 1 GiB.
For devices with cache these operations should be cached.
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c rP10000
.sp
.if n \{\
.RS 4
.\}
.nf
Read from the first 10,000 positions (4 KiB) blocks in a device.
.fi
.if n \{\
.RE
.\}
.SS "Mixing reads/writes"
.sp
\fBspit\fP \-f /dev/device \-c mP10000 \-c rk64
.sp
.if n \{\
.RS 4
.\}
.nf
Two threads, one reading/write metadata to 10,000 positions. Another
thread performing sequential reads.
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c w \-c r
.sp
.if n \{\
.RS 4
.\}
.nf
Two threads, both sequential, one reading, one writing.
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c ws0 \-c rs0
.sp
.if n \{\
.RS 4
.\}
.nf
Two threads, both random, one reading, one writing.
.fi
.if n \{\
.RE
.\}
.sp
\fBspit\fP \-f /dev/device \-c ws1G0\-100 \-c ws0G100\-200
.sp
.if n \{\
.RS 4
.\}
.nf
On a 200 GiB perform linear writes in the first half and
random writes on the second half.
.fi
.if n \{\
.RE
.\}
.SS "SNIA latency graphs"
.sp
\fBspit\fP \-p G \-f /dev/device \-c rs0n \-t 3600
.sp
.if n \{\
.RS 4
.\}
.nf
To generate the Response Time Histogram \- Confidence Level Plot of
the SNIA SSS PTS 2.0.1 use the above command. This will run a
preconditioning step, 2x the size of the device LBA.  The proceed
with a random 4k read pattern, reordering after each pass.  The
output will be written \(aqspit\-latency\-read.gnu\(aq which can be loaded
into gnuplot.
.fi
.if n \{\
.RE
.\}
.SH "EXIT STATUS"
.sp
\fB0\fP
.RS 4
Success.
.RE
.sp
\fBnon\-zero\fP
.RS 4
Failure (syntax of usage error).
.RE
.SH "BUGS"
.sp
Bugs will be rewarded by choc fish.
.SH "AUTHOR(S)"
.sp
\fBStuart Inglis, Ph.D.\fP
.RS 4
Author(s).
.RE